// mangodb

// an app should use single MongoClient instance for all dtbase request
// creating MongoClient is resource intensive
// creating a new MongoClient for each request will affect the application perfomance

// troubleshooting a MongoDB connection in node.js application

- this could be due to newtwork access error
- or user authentication errors

BSON
- optimized to retrival, storage and transmission across the wire.
-more secure than text json

Documenent
- used for storing data in mangodb

CRUD OPERATION  IN mangodb

-insertOne() - to insert a single doc into the collection.

Insert a Document
To insert a single document into a collection, append insertOne() to the collection variable. The insertOne() method accepts a document as an argument and returns a promise. In this example, the document that's being inserted is stored in a variable called sampleAccount, which is declared just above the main() function.

-insertMany() - used to insert many doc into a collection

Insert Many Documents
To insert more than one document, append the insertMany() method to the collection object, and then pass an array of documents to the insertMany() method. The insertMany() method returns a promise. We await the promise to get the result of the operation, which we then use to log the number of documents that are inserted to the console. In this example, the accounts to be inserted are stored in an array variable called sampleAccounts. This variable is defined just above the main() function

-insertedCount - used to count the number of doc inserted into the databse


// QUERYING a mangodb collection in node.js

// retrieving doc from the mangodb collection we will use the follwing methods
- find()

Using find()
The find() method is a read operation that returns a cursor to the documents that match the query. The find() method takes a query or filter document as an argument. If you do not specify a query document, the find() method returns all documents in the collection.

-findOne()

Using findOne()
In this example, we return a single document from a query, which is assigned to a variable called documentToFind. We use the findOne() method on the collection object to return the first document that matches the filter criteria, which are defined in the documentToFind variable.

-find()
-accept the query document
-matches the doc in the collection you want to find

nb: query operation are expressd as filters


// UPDATING DOCS IN mangodb AND NODE.js
// the methods used are:
-updateOne()
- we use it to a update values that matched some single criteria
-accept query filter and some update instruction

In this example, we use the updateOne() to update the value of an existing field in a document. Append the updateOne() method to the collection object to update a single document that matches the filter criteria, which are stored in the documentToUpdate variable. The update document contains the changes to be made and is stored in the update variable.


-updateMany();

In this example, we update many documents by adding a value to the transfers_complete array of all checking account documents. The updateMany() method is appended to the collection object. The method accepts a filter that matches the document(s) that we want to update and an update statement that instructs the driver how to change the matching document. Both the filter and the update documents are stored in variables. The updateMany() method updates all the documents in the collection that match the filter.

// to update field with arrays values we can use ie { scores: [1, 1, 1, 23]}
   - $push
   - $pull
   - $pop


// deleting a doc from collection

-deleteOne()
To delete a single document from a collection, use the deleteOne() method on a collection object. This method accepts a query filter that matches the document that you want to delete. If you do not specify a filter, MongoDB matches and deletes the first document in the collection. Here's an example:

-deleteMany()

You can delete multiple documents from a collection in a single operation by calling the deleteMany() method on a collection object. To specify which documents to delete, pass a query filter that matches the documents that you want to delete. If you provide an empty document, MongoDB matches all documents in the collection and deletes them. In the following example, we delete all accounts with a balance of less than 500 by using a query filter. Then, we print the total number of deleted documents.


/* Multidocument transaction */
- Are group of database operation that will be completed together as a unit or not at all
-used when a group of operation must succeed or fail together.

-- steps to complete a transaction --
  - start session - logical group or series of operation that should go together
  - define transaction operation
  -sequence of operation to perform inside a transaction
  - release resources that hve been used by the transaction


--- perfoming aggregation --
--syntax
   - const pipeline = [stage1, stage2, stage3]
   - db.collection.aggregate(pipeline)