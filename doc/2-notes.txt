Mangodb Aggregation framework with node.js
-used to build multistage queries
- $match - stage allows us to filter the doc
         - filter the document to pass only the doc that match the specified condition to the next stage of the pipeline


Aggregation gives you a way to transform data from your collection by passing documents from one stage to another. These stages can consist of operators that transform or organize your data in a specific way. In this lesson, we used $match and $group.

The $match stage filters documents by using a simple equality match, like $match: { author: "Dave"}, or aggregation expressions using comparison operators, like $match: { likes: { $gt: 100 } }. This operator accepts a query document and passes the resulting documents to the next stage. $match should be placed early in your pipeline to reduce the number of documents to process.

-$project - stage allows us to specify the field we want to see in the result
-$group - stage seperates the doc into groups according to the group key
        - the output is one doc for each unique group

The $group stage separates documents according to a group key and returns one document for every unique group key. The group key is usually a field in the document, but it can also be an expression that resolves to a field. The $group stage can be used with aggregation expressions to perform calculations on the grouped documents. An example of this is adding up the total number of movie tickets sold by using the $sum operator:

-Aggregation is language for--
-sorting
-filtering
-organizing
-analyizing

expression operators
example
- $gt - greater than
- $toUpper - to uppercase

--aggregation pipeline stages--
-$sort - sorts all the input doc and return them to the pipeline in a sorted order
  -- sorting ascending order we use value of 1
  -- sorting descending order we use the value of -1

Aggregation is a powerful tool that gives us the ability to compute and transform our data. In this lesson, we focused on the $sort and $project stages.

The $sort stage takes all the input documents and sorts them in a specific order. The documents can be sorted in numerical, alphabetical, ascending, or descending order.

The $sort stage accepts a sort key that specifies the field to sort on. The sort key can be 1 for ascending order or -1 for descending order. For example:

{ $sort: { balance: 1 } } sorts the documents in ascending order by the balance field.

{ $sort: { balance: -1 } } sorts the documents in descending order by the balance field.

-$project- passes the doc with the requested field to the next stage of the pipeline
         - this field could be existed field from the doc or newly computed fields


         The $project stage takes all the input documents and passes along only a subset of the fields in those documents by specifying the fields to include or exclude.

For example, if we want our resulting documents to include only the account_id, we write { $project: { _id: 0, account_id: 1 } }. The _id field is excluded by setting it to 0, and the account_id field is included by setting it to 1.
